import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Polygon;

public class Plane {
	private static Vector camera;
	private Polygon rendering2D;
	private Vector[] rendering3D;
	private Vector normal;
	private double squaredDistanceFromCamera;
	private Color color;

	public Plane(double renderAngleθ, double renderAngleφ, Vector... v) {
		this.rendering3D = new Vector[] { v[0], v[1], v[2], v[3] };
		this.setSquaredDistanceFrom(Plane.camera);
		this.setRender(renderAngleθ, renderAngleφ);
		this.setNormal();
		this.setColor();
	}

	public static void setCamera(Vector camera) {
		Plane.camera = camera;
	}

	public void setSquaredDistanceFrom(Vector p1) {
		double[] dist = { p1.distSq(this.rendering3D[0]), p1.distSq(this.rendering3D[1]),
				p1.distSq(this.rendering3D[2]), p1.distSq(this.rendering3D[3]) };

		double shortestDistance = dist[0];
		for (int i = 1; i < dist.length; i++) {
			if (dist[i] < shortestDistance)
				shortestDistance = dist[i];
		}
		this.squaredDistanceFromCamera = shortestDistance;
	}

	public void setNormal() {
		Vector v1 = new Vector(this.rendering3D[1], this.rendering3D[3]),
				v2 = new Vector(this.rendering3D[0], this.rendering3D[2]), normal = v1.crossProduct(v2);
		normal.setPosition(this.rendering3D[0]);
		normal = normal.multiplyByScalar(0.1);
		this.normal = normal;
	}

	public void setRender(double θ, double φ) {
		Point[] pts2d = { this.rendering3D[0].getRender(θ, φ), this.rendering3D[1].getRender(θ, φ),
				this.rendering3D[2].getRender(θ, φ), this.rendering3D[3].getRender(θ, φ) };
		this.rendering2D = new Polygon(new int[] { pts2d[0].x, pts2d[1].x, pts2d[2].x, pts2d[3].x },
				new int[] { pts2d[0].y, pts2d[1].y, pts2d[2].y, pts2d[3].y }, 4);
	}

	public void setColor() {
		float hue = 0.75f;
		float sat = 0.5f;
		double angleBetweenCameraAndNormal = this.normal.getAngle(Plane.camera) / Math.PI;
		float bright = (float) (1 - angleBetweenCameraAndNormal);
		this.color = Color.getHSBColor(hue, sat, bright);
	}

	public void draw(Graphics g) {
		this.draw(g, this.color, Color.black);
	}

	public void draw(Graphics g, Color fill, Color outline) {
		g.setColor(fill);
		g.fillPolygon(this.rendering2D);
		g.setColor(outline);
		g.drawPolygon(this.rendering2D);
	}

	public double getSquaredDistanceFromCamera() {
		return this.squaredDistanceFromCamera;
	}
}
