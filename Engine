import java.applet.Applet;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

public abstract class Engine extends Applet
implements KeyListener, MouseListener, MouseMotionListener, MouseWheelListener {
	private int fps;
	private int timer;
	private int counter;
	private boolean initialized;
	private boolean smooth;

	@Override
	public final void init() {
		this.fps = 40;
		this.timer = 0;
		this.counter = 0;
		this.initialized = false;
		this.smooth = true;
		this.addMouseMotionListener(this);
		this.addMouseListener(this);
		this.addKeyListener(this);
		this.addMouseWheelListener(this);
		this.requestFocus();
	}

	@Override
	public final void paint(Graphics go) {
		Graphics2D g = (Graphics2D) go;
		if (this.smooth)
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

		long z = System.currentTimeMillis();
		if (!this.initialized) {
			this.first((Graphics2D) g.create());
			this.initialized = true;
		}

		this.loop((Graphics2D) g.create());

		if (this.counter < this.timer)
			this.counter++;

		z = System.currentTimeMillis() - z;
		try {
			z = this.fps - z > 0 ? this.fps - z : 0;
			Thread.sleep(z);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		this.repaint();
	}

	public abstract void first(Graphics2D g);

	public abstract void loop(Graphics2D g);

	public final void setFramerate(int fps) {
		this.fps = fps;
	}

	public final int getFramerate() {
		return this.fps;
	}

	public final void setSmooth(boolean b) {
		this.smooth = b;
	}

	@Override
	public void keyPressed(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseDragged(MouseEvent e) {
	}

	@Override
	public void mouseMoved(MouseEvent e) {
	}

	@Override
	public void mouseWheelMoved(MouseWheelEvent e) {
	}

	@Override
	// http://www.jguru.com/article/client-side/double-buffering.html
	public final void update(Graphics g) {
		Image img = this.createImage(this.getWidth(), this.getHeight());
		Graphics graphics = img.getGraphics();
		graphics.setColor(this.getBackground());
		graphics.fillRect(0, 0, this.getWidth(), this.getHeight());
		graphics.setColor(this.getForeground());
		this.paint(graphics);
		g.drawImage(img, 0, 0, this);
	}

}
