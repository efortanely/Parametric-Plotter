import java.applet.Applet;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;

public abstract class Engine extends Applet implements KeyListener,
		MouseListener, MouseMotionListener, MouseWheelListener {
	private static final long serialVersionUID = 1L;

	int fps = 40;
	int timer = 0;
	int counter = 0;
	int camx = 0;
	int camy = 0;
	boolean initialized = false;
	boolean debug = false;
	boolean smooth = true;

	public final void moveCameraX(int mag) {
		camx += mag;
	}

	public final void moveCameraY(int mag) {
		camy += mag;
	}

	public final void setCameraX(int pos) {
		camx = pos;
	}

	public final void setCameraY(int pos) {
		camy = pos;
	}

	@Override
	public final void init() {
		addMouseMotionListener(this);
		addMouseListener(this);
		addKeyListener(this);
		addMouseWheelListener(this);
		requestFocus();
	}

	@Override
	public final void paint(Graphics go) {
		Graphics2D g = (Graphics2D) go;
		if (smooth) {
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_ON);
		}
		long z = System.currentTimeMillis();
		if (!initialized) {
			first((Graphics2D)g.create());
			initialized = true;
		}
		g.translate(camx, camy);
		loop((Graphics2D)g.create());
		
		if (counter < timer) {
			counter++;
		}
		z = System.currentTimeMillis() - z;
		try {
			z = (fps - z > 0) ? fps - z : 0;
			Thread.sleep(z);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		repaint();
	}

	public abstract void first(Graphics2D g);
	public abstract void loop(Graphics2D g);

	@Override
	public void keyPressed(KeyEvent e) {
	}

	@Override
	public void keyReleased(KeyEvent e) {
	}

	@Override
	public void keyTyped(KeyEvent e) {
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
	}

	@Override
	public void mouseExited(MouseEvent e) {
	}

	@Override
	public void mousePressed(MouseEvent e) {
	}

	@Override
	public void mouseReleased(MouseEvent e) {
	}

	@Override
	public void mouseDragged(MouseEvent e) {
	}

	@Override
	public void mouseMoved(MouseEvent e) {
	}

	@Override
	public void mouseWheelMoved(MouseWheelEvent e) {
	}

	Image boi;
	Graphics bog;

	@Override
	public final void update(java.awt.Graphics g) {
		// Link: http://www.jguru.com/article/client-side/double-buffering.html
		boi = createImage(getWidth(), getHeight());
		bog = boi.getGraphics();
		bog.setColor(getBackground());
		bog.fillRect(0, 0, getWidth(), getHeight());
		bog.setColor(getForeground());
		paint(bog);
		g.drawImage(boi, 0, 0, this);
	}

}
