import java.awt.Color;
import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.TreeMap;

public class ShapeGrapher extends Grapher{
	ArrayList<ArrayList<ArrayList<Vector>>> objects = new ArrayList<ArrayList<ArrayList<Vector>>>();
	
	Function flower = (θ, φ) -> new double[]{((2*Math.sin(3*θ)+4)*Math.sin(θ)*Math.cos(φ)),
											 (2*Math.sin(3*θ)+4)*Math.cos(θ)*Math.cos(φ),
											  2*Math.cos(3*θ)*Math.cos(φ)};
	Function waterfall = (θ, φ) -> new double[]{θ - .05/(1+3*Math.exp(2*φ))*Math.cos(5*θ*7*φ), 
												φ + 0.1*Math.cos(5*θ*7*φ), 
												15/(1+ Math.exp(θ))+0.1*Math.cos(6*φ) + 0.5*Math.cos(5*θ*7*φ)};
	Function swirl = (θ,φ) -> {
		double r = 2 + Math.sin(7*θ + 5*φ);
		return new double[]{r*Math.cos(θ)*Math.sin(φ),r*Math.sin(θ)*Math.sin(φ),r*Math.cos(φ)};
	};
	Function tunnel = (θ,φ) -> new double[]{θ,φ,1.0/( Math.sqrt(Math.pow(θ, 2) + Math.pow(φ, 2) ) )};	
	
	//scale is first term in constructor, translate function with "shift", then call graph method on shifted object and add to objects
	@Override public void first(Graphics2D g) {
		System.out.println("running");		
		ArrayList<ArrayList<Vector>>
			torus = new TorusKnot(30, 1.5, 2, 4, 1, 3).graph(),
			knot = new TorusKnot(30,.5,2,4,5,7).graph(),
			morusFlorus = new ParametricPlot(30, flower, new double[]{0,2*Math.PI}, new double[]{0,2*Math.PI}).graph(),
			wowNiceWaterfall = new ParametricPlot(30, waterfall, new double[]{-5,5}, new double[]{0,6*Math.PI}).graph(),
			hemisphere = new Sphere(100, new double[]{0,Math.PI}, new double[]{0,Math.PI}).graph(),
			twisty = new ParametricPlot(30, swirl, new double[]{0,2*Math.PI}, new double[]{0,2*Math.PI}, Math.PI/50, Math.PI/50).graph(),
			blackHole = new ParametricPlot(50,tunnel,new double[]{-Math.PI,Math.PI}, new double[]{-Math.PI,Math.PI}).graph();
		objects.add(torus);
	}
	
	@Override public void loop(Graphics2D go){
		Graphics2D g = (Graphics2D) go.create();
		g.setColor(new Color(30,30,30));
		g.fillRect(0,0,getWidth(),getHeight());
		g.translate(getWidth()/2,getHeight()/2); //center on screen
		
		TreeMap<Double, ArrayList<PlottablePoint>> drawableObjects = renderByDistance(objects, maxDistanceFromOrigin(objects));
		
		//paint
		for(Double distance : drawableObjects.keySet()){
			for(PlottablePoint poly : drawableObjects.get(distance)){
				poly.draw(g,θ,φ);
			}
		}
		
		θ += disp.x * 0.1;
		if(dir[LEFT])   θ += Math.PI/15;
		if(dir[RIGHT]) θ -= Math.PI/15;
			
		φ += disp.y * 0.1;
		if(dir[UP]) φ -= Math.PI/15;
		if(dir[DOWN]) φ += Math.PI/15;
		
		for(int i=0; i<dir.length; i++) dir[i]=false;
		
		g.dispose();
	}
}
